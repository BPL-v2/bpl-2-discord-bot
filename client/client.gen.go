// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for AggregationType.
const (
	EARLIEST          AggregationType = "EARLIEST"
	EARLIESTFRESHITEM AggregationType = "EARLIEST_FRESH_ITEM"
	MAXIMUM           AggregationType = "MAXIMUM"
	MINIMUM           AggregationType = "MINIMUM"
	SUMLATEST         AggregationType = "SUM_LATEST"
)

// Defines values for ApplicationStatus.
const (
	ApplicationStatusAccepted   ApplicationStatus = "accepted"
	ApplicationStatusApplied    ApplicationStatus = "applied"
	ApplicationStatusNone       ApplicationStatus = "none"
	ApplicationStatusWaitlisted ApplicationStatus = "waitlisted"
)

// Defines values for ApprovalStatus.
const (
	APPROVED ApprovalStatus = "APPROVED"
	PENDING  ApprovalStatus = "PENDING"
	REJECTED ApprovalStatus = "REJECTED"
)

// Defines values for Difftype.
const (
	Added     Difftype = "Added"
	Changed   Difftype = "Changed"
	Removed   Difftype = "Removed"
	Unchanged Difftype = "Unchanged"
)

// Defines values for FieldType.
const (
	Bool        FieldType = "bool"
	Int         FieldType = "int"
	String      FieldType = "string"
	StringArray FieldType = "string[]"
)

// Defines values for GameVersion.
const (
	PoE1 GameVersion = "poe1"
	PoE2 GameVersion = "poe2"
)

// Defines values for ItemField.
const (
	BASETYPE       ItemField = "BASE_TYPE"
	CRAFTEDMODS    ItemField = "CRAFTED_MODS"
	ENCHANTS       ItemField = "ENCHANT_MODS"
	EXPLICITS      ItemField = "EXPLICIT_MODS"
	FRACTUREDMODS  ItemField = "FRACTURED_MODS"
	FRAMETYPE      ItemField = "FRAME_TYPE"
	ILVL           ItemField = "ILVL"
	IMPLICITS      ItemField = "IMPLICIT_MODS"
	INCUBATORKILLS ItemField = "INCUBATOR_KILLS"
	ISCORRUPTED    ItemField = "IS_CORRUPTED"
	ISVAAL         ItemField = "IS_VAAL"
	LEVEL          ItemField = "LEVEL"
	MAXLINKS       ItemField = "MAX_LINKS"
	NAME           ItemField = "NAME"
	QUALITY        ItemField = "QUALITY"
	RARITY         ItemField = "RARITY"
	RITUALBOSSES   ItemField = "RITUAL_VESSEL_BOSSES"
	RITUALMAP      ItemField = "RITUAL_VESSEL_MAP"
	SANCTUMMODS    ItemField = "SANCTUM_AFFLICTIONS"
	SOCKETS        ItemField = "SOCKETS"
	TALISMANTIER   ItemField = "TALISMAN_TIER"
	TEMPLEROOMS    ItemField = "TEMPLE_ROOMS"
	TYPELINE       ItemField = "TYPE_LINE"
)

// Defines values for JobType.
const (
	EvaluateStashChanges JobType = "EvaluateStashChanges"
	FetchCharacterData   JobType = "FetchCharacterData"
	FetchStashChanges    JobType = "FetchStashChanges"
)

// Defines values for NumberField.
const (
	ASCENDANCY      NumberField = "ASCENDANCY"
	DELVEDEPTH      NumberField = "DELVE_DEPTH"
	PANTHEON        NumberField = "PANTHEON"
	PLAYERLEVEL     NumberField = "PLAYER_LEVEL"
	PLAYERSCORE     NumberField = "PLAYER_SCORE"
	STACKSIZE       NumberField = "STACK_SIZE"
	SUBMISSIONVALUE NumberField = "SUBMISSION_VALUE"
)

// Defines values for ObjectiveType.
const (
	ITEM       ObjectiveType = "ITEM"
	PLAYER     ObjectiveType = "PLAYER"
	SUBMISSION ObjectiveType = "SUBMISSION"
)

// Defines values for Operator.
const (
	CONTAINS      Operator = "CONTAINS"
	CONTAINSMATCH Operator = "CONTAINS_MATCH"
	EQ            Operator = "EQ"
	GT            Operator = "GT"
	IN            Operator = "IN"
	LENGTHEQ      Operator = "LENGTH_EQ"
	LENGTHGT      Operator = "LENGTH_GT"
	LENGTHLT      Operator = "LENGTH_LT"
	LT            Operator = "LT"
	MATCHES       Operator = "MATCHES"
	NEQ           Operator = "NEQ"
	NOTIN         Operator = "NOT_IN"
)

// Defines values for Permission.
const (
	PermissionAdmin             Permission = "admin"
	PermissionCommandTeam       Permission = "command_team"
	PermissionJudge             Permission = "judge"
	PermissionObjectiveDesigner Permission = "objective_designer"
)

// Defines values for ScoringMethod.
const (
	BONUSPERCOMPLETION ScoringMethod = "BONUS_PER_COMPLETION"
	POINTSFROMVALUE    ScoringMethod = "POINTS_FROM_VALUE"
	PRESENCE           ScoringMethod = "PRESENCE"
	RANKEDCOMPLETION   ScoringMethod = "RANKED_COMPLETION_TIME"
	RANKEDREVERSE      ScoringMethod = "RANKED_REVERSE"
	RANKEDTIME         ScoringMethod = "RANKED_TIME"
	RANKEDVALUE        ScoringMethod = "RANKED_VALUE"
)

// Defines values for ScoringPresetType.
const (
	CATEGORY  ScoringPresetType = "CATEGORY"
	OBJECTIVE ScoringPresetType = "OBJECTIVE"
)

// Defines values for OauthCallbackParamsProvider.
const (
	OauthCallbackParamsProviderDiscord OauthCallbackParamsProvider = "discord"
	OauthCallbackParamsProviderPoe     OauthCallbackParamsProvider = "poe"
	OauthCallbackParamsProviderTwitch  OauthCallbackParamsProvider = "twitch"
)

// Defines values for OauthRedirectParamsProvider.
const (
	OauthRedirectParamsProviderDiscord OauthRedirectParamsProvider = "discord"
	OauthRedirectParamsProviderPoe     OauthRedirectParamsProvider = "poe"
	OauthRedirectParamsProviderTwitch  OauthRedirectParamsProvider = "twitch"
)

// AggregationType defines model for AggregationType.
type AggregationType string

// ApplicationStatus defines model for ApplicationStatus.
type ApplicationStatus string

// ApprovalStatus defines model for ApprovalStatus.
type ApprovalStatus string

// Atlas defines model for Atlas.
type Atlas struct {
	EventId int     `json:"event_id"`
	Index   int     `json:"index"`
	Trees   [][]int `json:"trees"`
	UserId  int     `json:"user_id"`
}

// CallbackBody defines model for CallbackBody.
type CallbackBody struct {
	Code        string `json:"code"`
	RedirectUrl string `json:"redirect_url"`
	State       string `json:"state"`
}

// CallbackResponse defines model for CallbackResponse.
type CallbackResponse struct {
	AuthToken string `json:"auth_token"`
	LastPath  string `json:"last_path"`
	User      User   `json:"user"`
}

// Category defines model for Category.
type Category struct {
	Id              int            `json:"id"`
	Name            string         `json:"name"`
	Objectives      []Objective    `json:"objectives"`
	ScoringPreset   *ScoringPreset `json:"scoring_preset,omitempty"`
	ScoringPresetId *int           `json:"scoring_preset_id,omitempty"`
	SubCategories   []Category     `json:"sub_categories"`
}

// CategoryCreate defines model for CategoryCreate.
type CategoryCreate struct {
	Id              *int   `json:"id,omitempty"`
	Name            string `json:"name"`
	ParentId        int    `json:"parent_id"`
	ScoringPresetId *int   `json:"scoring_preset_id,omitempty"`
}

// Character defines model for Character.
type Character struct {
	Ascendancy       string `json:"ascendancy"`
	AscendancyPoints int    `json:"ascendancy_points"`
	AtlasNodeCount   int    `json:"atlas_node_count"`
	EventId          int    `json:"event_id"`
	Level            int    `json:"level"`
	MainSkill        string `json:"main_skill"`
	Name             string `json:"name"`
	Pantheon         bool   `json:"pantheon"`
	Timestamp        string `json:"timestamp"`
	UserId           int    `json:"user_id"`
}

// Condition defines model for Condition.
type Condition struct {
	Field    ItemField `json:"field"`
	Id       int       `json:"id"`
	Operator Operator  `json:"operator"`
	Value    string    `json:"value"`
}

// ConditionCreate defines model for ConditionCreate.
type ConditionCreate struct {
	Field       ItemField `json:"field"`
	Id          *int      `json:"id,omitempty"`
	ObjectiveId int       `json:"objective_id"`
	Operator    Operator  `json:"operator"`
	Value       string    `json:"value"`
}

// ConditionMappings defines model for ConditionMappings.
type ConditionMappings struct {
	FieldToType                 map[string]FieldType     `json:"field_to_type"`
	ObjectiveTypeToNumberFields map[string][]NumberField `json:"objective_type_to_number_fields"`
	ValidOperators              map[string][]Operator    `json:"valid_operators"`
}

// Difftype defines model for Difftype.
type Difftype string

// Event defines model for Event.
type Event struct {
	ApplicationStartTime string      `json:"application_start_time"`
	EventEndTime         string      `json:"event_end_time"`
	EventStartTime       string      `json:"event_start_time"`
	GameVersion          GameVersion `json:"game_version"`
	Id                   int         `json:"id"`
	IsCurrent            bool        `json:"is_current"`
	IsLocked             bool        `json:"is_locked"`
	IsPublic             bool        `json:"is_public"`
	MaxSize              int         `json:"max_size"`
	Name                 string      `json:"name"`
	Teams                []Team      `json:"teams"`
}

// EventCreate defines model for EventCreate.
type EventCreate struct {
	ApplicationStartTime string      `json:"application_start_time"`
	EventEndTime         string      `json:"event_end_time"`
	EventStartTime       string      `json:"event_start_time"`
	GameVersion          GameVersion `json:"game_version"`
	Id                   *int        `json:"id,omitempty"`
	IsCurrent            *bool       `json:"is_current,omitempty"`
	IsLocked             *bool       `json:"is_locked,omitempty"`
	IsPublic             *bool       `json:"is_public,omitempty"`
	MaxSize              int         `json:"max_size"`
	Name                 string      `json:"name"`
}

// EventStatus defines model for EventStatus.
type EventStatus struct {
	ApplicationStatus ApplicationStatus `json:"application_status"`
	IsTeamLead        bool              `json:"is_team_lead"`
	TeamId            *int              `json:"team_id,omitempty"`
}

// FieldType defines model for FieldType.
type FieldType string

// GameVersion defines model for GameVersion.
type GameVersion string

// ItemField defines model for ItemField.
type ItemField string

// JobCreate defines model for JobCreate.
type JobCreate struct {
	DurationInSeconds        *int     `json:"duration_in_seconds,omitempty"`
	EndDate                  *string  `json:"end_date,omitempty"`
	EventId                  *int     `json:"event_id,omitempty"`
	JobType                  *JobType `json:"job_type,omitempty"`
	SleepAfterEachRunSeconds *int     `json:"sleep_after_each_run_seconds,omitempty"`
}

// JobType defines model for JobType.
type JobType string

// LadderEntry defines model for LadderEntry.
type LadderEntry struct {
	AccountName    string     `json:"account_name"`
	CharacterClass string     `json:"character_class"`
	CharacterName  string     `json:"character_name"`
	Delve          int        `json:"delve"`
	Experience     int        `json:"experience"`
	Extra          *Character `json:"extra,omitempty"`
	Level          int        `json:"level"`
	Rank           int        `json:"rank"`
	UserId         int        `json:"user_id"`
}

// MinimalUser defines model for MinimalUser.
type MinimalUser struct {
	DisplayName string `json:"display_name"`
	Id          int    `json:"id"`
}

// NonSensitiveUser defines model for NonSensitiveUser.
type NonSensitiveUser struct {
	AccountName *string `json:"account_name,omitempty"`
	DiscordId   *string `json:"discord_id,omitempty"`
	DiscordName *string `json:"discord_name,omitempty"`
	DisplayName string  `json:"display_name"`
	Id          int     `json:"id"`
	TwitchId    *string `json:"twitch_id,omitempty"`
	TwitchName  *string `json:"twitch_name,omitempty"`
}

// NumberField defines model for NumberField.
type NumberField string

// Objective defines model for Objective.
type Objective struct {
	Aggregation     AggregationType `json:"aggregation"`
	CategoryId      int             `json:"category_id"`
	Conditions      []Condition     `json:"conditions"`
	Extra           string          `json:"extra"`
	Id              int             `json:"id"`
	Name            string          `json:"name"`
	NumberField     NumberField     `json:"number_field"`
	ObjectiveType   ObjectiveType   `json:"objective_type"`
	RequiredNumber  int             `json:"required_number"`
	ScoringPreset   *ScoringPreset  `json:"scoring_preset,omitempty"`
	ScoringPresetId *int            `json:"scoring_preset_id,omitempty"`
	ValidFrom       *string         `json:"valid_from,omitempty"`
	ValidTo         *string         `json:"valid_to,omitempty"`
}

// ObjectiveConditionCreate defines model for ObjectiveConditionCreate.
type ObjectiveConditionCreate struct {
	Field    ItemField `json:"field"`
	Id       *int      `json:"id,omitempty"`
	Operator Operator  `json:"operator"`
	Value    string    `json:"value"`
}

// ObjectiveCreate defines model for ObjectiveCreate.
type ObjectiveCreate struct {
	Aggregation     AggregationType            `json:"aggregation"`
	CategoryId      int                        `json:"category_id"`
	Conditions      []ObjectiveConditionCreate `json:"conditions"`
	Extra           *string                    `json:"extra,omitempty"`
	Id              *int                       `json:"id,omitempty"`
	Name            string                     `json:"name"`
	NumberField     NumberField                `json:"number_field"`
	ObjectiveType   ObjectiveType              `json:"objective_type"`
	RequiredNumber  int                        `json:"required_number"`
	ScoringPresetId *int                       `json:"scoring_preset_id,omitempty"`
	ValidFrom       *string                    `json:"valid_from,omitempty"`
	ValidTo         *string                    `json:"valid_to,omitempty"`
}

// ObjectiveType defines model for ObjectiveType.
type ObjectiveType string

// Operator defines model for Operator.
type Operator string

// Permission defines model for Permission.
type Permission string

// RecurringJob defines model for RecurringJob.
type RecurringJob struct {
	EndDate                  string  `json:"end_date"`
	EventId                  int     `json:"event_id"`
	JobType                  JobType `json:"job_type"`
	SleepAfterEachRunSeconds int     `json:"sleep_after_each_run_seconds"`
}

// Score defines model for Score.
type Score struct {
	Finished  bool   `json:"finished"`
	Number    int    `json:"number"`
	Points    int    `json:"points"`
	Rank      int    `json:"rank"`
	Timestamp string `json:"timestamp"`
	UserId    int    `json:"user_id"`
}

// ScoreDiff defines model for ScoreDiff.
type ScoreDiff struct {
	DiffType  Difftype `json:"diff_type"`
	FieldDiff []string `json:"field_diff"`
	Score     Score    `json:"score"`
}

// ScoreMap defines model for ScoreMap.
type ScoreMap map[string]ScoreDiff

// ScoringMethod defines model for ScoringMethod.
type ScoringMethod string

// ScoringPreset defines model for ScoringPreset.
type ScoringPreset struct {
	Description   string            `json:"description"`
	Id            int               `json:"id"`
	Name          string            `json:"name"`
	Points        []float32         `json:"points"`
	ScoringMethod ScoringMethod     `json:"scoring_method"`
	Type          ScoringPresetType `json:"type"`
}

// ScoringPresetCreate defines model for ScoringPresetCreate.
type ScoringPresetCreate struct {
	Description   *string           `json:"description,omitempty"`
	Id            *int              `json:"id,omitempty"`
	Name          string            `json:"name"`
	Points        []float32         `json:"points"`
	ScoringMethod ScoringMethod     `json:"scoring_method"`
	Type          ScoringPresetType `json:"type"`
}

// ScoringPresetType defines model for ScoringPresetType.
type ScoringPresetType string

// Signup defines model for Signup.
type Signup struct {
	ExpectedPlaytime int              `json:"expected_playtime"`
	Id               int              `json:"id"`
	TeamId           *int             `json:"team_id,omitempty"`
	TeamLead         bool             `json:"team_lead"`
	Timestamp        string           `json:"timestamp"`
	User             NonSensitiveUser `json:"user"`
}

// SignupCreate defines model for SignupCreate.
type SignupCreate struct {
	ExpectedPlaytime int `json:"expected_playtime"`
}

// Submission defines model for Submission.
type Submission struct {
	ApprovalStatus ApprovalStatus    `json:"approval_status"`
	Comment        string            `json:"comment"`
	Id             int               `json:"id"`
	Number         int               `json:"number"`
	Objective      *Objective        `json:"objective,omitempty"`
	Proof          string            `json:"proof"`
	ReviewComment  *string           `json:"review_comment,omitempty"`
	ReviewerId     *int              `json:"reviewer_id,omitempty"`
	TeamId         *int              `json:"team_id,omitempty"`
	Timestamp      string            `json:"timestamp"`
	User           *NonSensitiveUser `json:"user,omitempty"`
}

// SubmissionCreate defines model for SubmissionCreate.
type SubmissionCreate struct {
	Comment     *string `json:"comment,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Number      *int    `json:"number,omitempty"`
	ObjectiveId int     `json:"objective_id"`
	Proof       *string `json:"proof,omitempty"`
	Timestamp   string  `json:"timestamp"`
}

// SubmissionReview defines model for SubmissionReview.
type SubmissionReview struct {
	ApprovalStatus ApprovalStatus `json:"approval_status"`
	ReviewComment  *string        `json:"review_comment,omitempty"`
}

// SuggestionCreate defines model for SuggestionCreate.
type SuggestionCreate struct {
	Id int `json:"id"`
}

// Suggestions defines model for Suggestions.
type Suggestions struct {
	CategoryIds  []int `json:"category_ids"`
	ObjectiveIds []int `json:"objective_ids"`
}

// Team defines model for Team.
type Team struct {
	AllowedClasses []string `json:"allowed_classes"`
	Color          *string  `json:"color,omitempty"`
	EventId        int      `json:"event_id"`
	Id             int      `json:"id"`
	Name           string   `json:"name"`
}

// TeamCreate defines model for TeamCreate.
type TeamCreate struct {
	AllowedClasses []string `json:"allowed_classes"`
	Color          *string  `json:"color,omitempty"`
	Id             *int     `json:"id,omitempty"`
	Name           string   `json:"name"`
}

// TeamUserCreate defines model for TeamUserCreate.
type TeamUserCreate struct {
	IsTeamLead *bool `json:"is_team_lead,omitempty"`
	TeamId     *int  `json:"team_id,omitempty"`
	UserId     int   `json:"user_id"`
}

// TwitchStream defines model for TwitchStream.
type TwitchStream struct {
	BackendUserId *int      `json:"backend_user_id,omitempty"`
	GameId        *string   `json:"game_id,omitempty"`
	GameName      *string   `json:"game_name,omitempty"`
	Id            *string   `json:"id,omitempty"`
	IsMature      *bool     `json:"is_mature,omitempty"`
	Language      *string   `json:"language,omitempty"`
	StartedAt     *string   `json:"started_at,omitempty"`
	TagIds        *[]string `json:"tag_ids,omitempty"`
	Tags          *[]string `json:"tags,omitempty"`
	ThumbnailUrl  *string   `json:"thumbnail_url,omitempty"`
	Title         *string   `json:"title,omitempty"`
	Type          *string   `json:"type,omitempty"`
	UserId        *string   `json:"user_id,omitempty"`
	UserLogin     *string   `json:"user_login,omitempty"`
	UserName      *string   `json:"user_name,omitempty"`
	ViewerCount   *int      `json:"viewer_count,omitempty"`
}

// User defines model for User.
type User struct {
	AccountName          *string      `json:"account_name,omitempty"`
	DiscordId            *string      `json:"discord_id,omitempty"`
	DiscordName          *string      `json:"discord_name,omitempty"`
	DisplayName          string       `json:"display_name"`
	Id                   int          `json:"id"`
	Permissions          []Permission `json:"permissions"`
	TokenExpiryTimestamp *string      `json:"token_expiry_timestamp,omitempty"`
	TwitchId             *string      `json:"twitch_id,omitempty"`
	TwitchName           *string      `json:"twitch_name,omitempty"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	DisplayName string `json:"display_name"`
}

// AddUsersToTeamsJSONBody defines parameters for AddUsersToTeams.
type AddUsersToTeamsJSONBody = []TeamUserCreate

// OauthCallbackParamsProvider defines parameters for OauthCallback.
type OauthCallbackParamsProvider string

// OauthRedirectParams defines parameters for OauthRedirect.
type OauthRedirectParams struct {
	// RedirectUrl Redirect URL for oauth provider
	RedirectUrl *string `form:"redirect_url,omitempty" json:"redirect_url,omitempty"`

	// LastUrl Last URL to redirect to after oauth is finished
	LastUrl *string `form:"last_url,omitempty" json:"last_url,omitempty"`
}

// OauthRedirectParamsProvider defines parameters for OauthRedirect.
type OauthRedirectParamsProvider string

// RemoveAuthParams defines parameters for RemoveAuth.
type RemoveAuthParams struct {
	// Provider Provider
	Provider string `form:"provider" json:"provider"`
}

// ChangePermissionsJSONBody defines parameters for ChangePermissions.
type ChangePermissionsJSONBody = []Permission

// CreateEventJSONRequestBody defines body for CreateEvent for application/json ContentType.
type CreateEventJSONRequestBody = EventCreate

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryCreate

// CreateConditionJSONRequestBody defines body for CreateCondition for application/json ContentType.
type CreateConditionJSONRequestBody = ConditionCreate

// DuplicateEventJSONRequestBody defines body for DuplicateEvent for application/json ContentType.
type DuplicateEventJSONRequestBody = EventCreate

// CreateObjectiveJSONRequestBody defines body for CreateObjective for application/json ContentType.
type CreateObjectiveJSONRequestBody = ObjectiveCreate

// CreateScoringPresetJSONRequestBody defines body for CreateScoringPreset for application/json ContentType.
type CreateScoringPresetJSONRequestBody = ScoringPresetCreate

// CreateSignupJSONRequestBody defines body for CreateSignup for application/json ContentType.
type CreateSignupJSONRequestBody = SignupCreate

// SubmitBountyJSONRequestBody defines body for SubmitBounty for application/json ContentType.
type SubmitBountyJSONRequestBody = SubmissionCreate

// ReviewSubmissionJSONRequestBody defines body for ReviewSubmission for application/json ContentType.
type ReviewSubmissionJSONRequestBody = SubmissionReview

// CreateCategoryTeamSuggestionJSONRequestBody defines body for CreateCategoryTeamSuggestion for application/json ContentType.
type CreateCategoryTeamSuggestionJSONRequestBody = SuggestionCreate

// CreateObjectiveTeamSuggestionJSONRequestBody defines body for CreateObjectiveTeamSuggestion for application/json ContentType.
type CreateObjectiveTeamSuggestionJSONRequestBody = SuggestionCreate

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = TeamCreate

// AddUsersToTeamsJSONRequestBody defines body for AddUsersToTeams for application/json ContentType.
type AddUsersToTeamsJSONRequestBody = AddUsersToTeamsJSONBody

// StartJobJSONRequestBody defines body for StartJob for application/json ContentType.
type StartJobJSONRequestBody = JobCreate

// OauthCallbackJSONRequestBody defines body for OauthCallback for application/json ContentType.
type OauthCallbackJSONRequestBody = CallbackBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserUpdate

// ChangePermissionsJSONRequestBody defines body for ChangePermissions for application/json ContentType.
type ChangePermissionsJSONRequestBody = ChangePermissionsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUserCharacters request
	GetUserCharacters(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharacterEventHistoryForUser request
	GetCharacterEventHistoryForUser(ctx context.Context, userId int, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvents request
	GetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEventWithBody request with any body
	CreateEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEvent(ctx context.Context, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEvent request
	DeleteEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEvent request
	GetEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamAtlasesForEvent request
	GetTeamAtlasesForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRulesForEvent request
	GetRulesForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryWithBody request with any body
	CreateCategoryWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategory(ctx context.Context, eventId int, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategory request
	DeleteCategory(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScoringCategory request
	GetScoringCategory(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCharactersForEvent request
	GetCharactersForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateConditionWithBody request with any body
	CreateConditionWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCondition(ctx context.Context, eventId int, body CreateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidMappings request
	GetValidMappings(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCondition request
	DeleteCondition(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DuplicateEventWithBody request with any body
	DuplicateEventWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DuplicateEvent(ctx context.Context, eventId int, body DuplicateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLadder request
	GetLadder(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateObjectiveWithBody request with any body
	CreateObjectiveWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateObjective(ctx context.Context, eventId int, body CreateObjectiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjective request
	DeleteObjective(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjective request
	GetObjective(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestScoresForEvent request
	GetLatestScoresForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SimpleScoreWebSocket request
	SimpleScoreWebSocket(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ScoreWebSocket request
	ScoreWebSocket(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetScoringPresetsForEvent request
	GetScoringPresetsForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScoringPresetWithBody request with any body
	CreateScoringPresetWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateScoringPreset(ctx context.Context, eventId int, body CreateScoringPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScoringPreset request
	DeleteScoringPreset(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventSignups request
	GetEventSignups(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSignup request
	DeleteSignup(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPersonalSignup request
	GetPersonalSignup(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSignupWithBody request with any body
	CreateSignupWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSignup(ctx context.Context, eventId int, body CreateSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventStatusForUser request
	GetEventStatusForUser(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubmissions request
	GetSubmissions(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitBountyWithBody request with any body
	SubmitBountyWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitBounty(ctx context.Context, eventId int, body SubmitBountyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSubmission request
	DeleteSubmission(ctx context.Context, eventId int, submissionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReviewSubmissionWithBody request with any body
	ReviewSubmissionWithBody(ctx context.Context, eventId int, submissionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReviewSubmission(ctx context.Context, eventId int, submissionId int, body ReviewSubmissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamSuggestions request
	GetTeamSuggestions(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryTeamSuggestionWithBody request with any body
	CreateCategoryTeamSuggestionWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategoryTeamSuggestion(ctx context.Context, eventId int, body CreateCategoryTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategoryTeamSuggestion request
	DeleteCategoryTeamSuggestion(ctx context.Context, eventId int, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateObjectiveTeamSuggestionWithBody request with any body
	CreateObjectiveTeamSuggestionWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateObjectiveTeamSuggestion(ctx context.Context, eventId int, body CreateObjectiveTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectiveTeamSuggestion request
	DeleteObjectiveTeamSuggestion(ctx context.Context, eventId int, objectiveId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeams request
	GetTeams(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamWithBody request with any body
	CreateTeamWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeam(ctx context.Context, eventId int, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUsersToTeamsWithBody request with any body
	AddUsersToTeamsWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddUsersToTeams(ctx context.Context, eventId int, body AddUsersToTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersForEvent request
	GetUsersForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobs request
	GetJobs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StartJobWithBody request with any body
	StartJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StartJob(ctx context.Context, body StartJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginDiscordBot request
	LoginDiscordBot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OauthCallbackWithBody request with any body
	OauthCallbackWithBody(ctx context.Context, provider OauthCallbackParamsProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OauthCallback(ctx context.Context, provider OauthCallbackParamsProvider, body OauthCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OauthRedirect request
	OauthRedirect(ctx context.Context, provider OauthRedirectParamsProvider, params *OauthRedirectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStreams request
	GetStreams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllUsers request
	GetAllUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveAuth request
	RemoveAuth(ctx context.Context, params *RemoveAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserById request
	GetUserById(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangePermissionsWithBody request with any body
	ChangePermissionsWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangePermissions(ctx context.Context, userId int, body ChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUserCharacters(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserCharactersRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharacterEventHistoryForUser(ctx context.Context, userId int, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharacterEventHistoryForUserRequest(c.Server, userId, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEvent(ctx context.Context, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamAtlasesForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamAtlasesForEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRulesForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesForEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategory(ctx context.Context, eventId int, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategory(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScoringCategory(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScoringCategoryRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCharactersForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCharactersForEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConditionWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConditionRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCondition(ctx context.Context, eventId int, body CreateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConditionRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidMappings(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidMappingsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCondition(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConditionRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateEventWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateEventRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DuplicateEvent(ctx context.Context, eventId int, body DuplicateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDuplicateEventRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLadder(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLadderRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateObjectiveWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateObjectiveRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateObjective(ctx context.Context, eventId int, body CreateObjectiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateObjectiveRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjective(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectiveRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjective(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectiveRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestScoresForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestScoresForEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SimpleScoreWebSocket(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSimpleScoreWebSocketRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ScoreWebSocket(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewScoreWebSocketRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetScoringPresetsForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetScoringPresetsForEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScoringPresetWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScoringPresetRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScoringPreset(ctx context.Context, eventId int, body CreateScoringPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScoringPresetRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScoringPreset(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScoringPresetRequest(c.Server, eventId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventSignups(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventSignupsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSignup(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSignupRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPersonalSignup(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPersonalSignupRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSignupWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSignupRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSignup(ctx context.Context, eventId int, body CreateSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSignupRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventStatusForUser(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventStatusForUserRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubmissions(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubmissionsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitBountyWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitBountyRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitBounty(ctx context.Context, eventId int, body SubmitBountyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitBountyRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSubmission(ctx context.Context, eventId int, submissionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSubmissionRequest(c.Server, eventId, submissionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewSubmissionWithBody(ctx context.Context, eventId int, submissionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewSubmissionRequestWithBody(c.Server, eventId, submissionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReviewSubmission(ctx context.Context, eventId int, submissionId int, body ReviewSubmissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReviewSubmissionRequest(c.Server, eventId, submissionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamSuggestions(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamSuggestionsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryTeamSuggestionWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryTeamSuggestionRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCategoryTeamSuggestion(ctx context.Context, eventId int, body CreateCategoryTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryTeamSuggestionRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCategoryTeamSuggestion(ctx context.Context, eventId int, categoryId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryTeamSuggestionRequest(c.Server, eventId, categoryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateObjectiveTeamSuggestionWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateObjectiveTeamSuggestionRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateObjectiveTeamSuggestion(ctx context.Context, eventId int, body CreateObjectiveTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateObjectiveTeamSuggestionRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectiveTeamSuggestion(ctx context.Context, eventId int, objectiveId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectiveTeamSuggestionRequest(c.Server, eventId, objectiveId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeams(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeam(ctx context.Context, eventId int, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUsersToTeamsWithBody(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUsersToTeamsRequestWithBody(c.Server, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUsersToTeams(ctx context.Context, eventId int, body AddUsersToTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUsersToTeamsRequest(c.Server, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, eventId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, eventId, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersForEvent(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersForEventRequest(c.Server, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StartJob(ctx context.Context, body StartJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStartJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginDiscordBot(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginDiscordBotRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthCallbackWithBody(ctx context.Context, provider OauthCallbackParamsProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthCallbackRequestWithBody(c.Server, provider, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthCallback(ctx context.Context, provider OauthCallbackParamsProvider, body OauthCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthCallbackRequest(c.Server, provider, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthRedirect(ctx context.Context, provider OauthRedirectParamsProvider, params *OauthRedirectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthRedirectRequest(c.Server, provider, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStreams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStreamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveAuth(ctx context.Context, params *RemoveAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveAuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserById(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePermissionsWithBody(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePermissionsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangePermissions(ctx context.Context, userId int, body ChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangePermissionsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUserCharactersRequest generates requests for GetUserCharacters
func NewGetUserCharactersRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCharacterEventHistoryForUserRequest generates requests for GetCharacterEventHistoryForUser
func NewGetCharacterEventHistoryForUserRequest(server string, userId int, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/characters/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventsRequest generates requests for GetEvents
func NewGetEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEventRequest calls the generic CreateEvent builder with application/json body
func NewCreateEventRequest(server string, body CreateEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEventRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEventRequestWithBody generates requests for CreateEvent with any type of body
func NewCreateEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEventRequest generates requests for DeleteEvent
func NewDeleteEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventRequest generates requests for GetEvent
func NewGetEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamAtlasesForEventRequest generates requests for GetTeamAtlasesForEvent
func NewGetTeamAtlasesForEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/atlas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesForEventRequest generates requests for GetRulesForEvent
func NewGetRulesForEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCategoryRequest calls the generic CreateCategory builder with application/json body
func NewCreateCategoryRequest(server string, eventId int, body CreateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateCategoryRequestWithBody generates requests for CreateCategory with any type of body
func NewCreateCategoryRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCategoryRequest generates requests for DeleteCategory
func NewDeleteCategoryRequest(server string, eventId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScoringCategoryRequest generates requests for GetScoringCategory
func NewGetScoringCategoryRequest(server string, eventId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCharactersForEventRequest generates requests for GetCharactersForEvent
func NewGetCharactersForEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/characters", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateConditionRequest calls the generic CreateCondition builder with application/json body
func NewCreateConditionRequest(server string, eventId int, body CreateConditionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConditionRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateConditionRequestWithBody generates requests for CreateCondition with any type of body
func NewCreateConditionRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/conditions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidMappingsRequest generates requests for GetValidMappings
func NewGetValidMappingsRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/conditions/valid-mappings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConditionRequest generates requests for DeleteCondition
func NewDeleteConditionRequest(server string, eventId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/conditions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDuplicateEventRequest calls the generic DuplicateEvent builder with application/json body
func NewDuplicateEventRequest(server string, eventId int, body DuplicateEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDuplicateEventRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewDuplicateEventRequestWithBody generates requests for DuplicateEvent with any type of body
func NewDuplicateEventRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/duplicate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLadderRequest generates requests for GetLadder
func NewGetLadderRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/ladder", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateObjectiveRequest calls the generic CreateObjective builder with application/json body
func NewCreateObjectiveRequest(server string, eventId int, body CreateObjectiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateObjectiveRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateObjectiveRequestWithBody generates requests for CreateObjective with any type of body
func NewCreateObjectiveRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/objectives", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectiveRequest generates requests for DeleteObjective
func NewDeleteObjectiveRequest(server string, eventId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/objectives/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectiveRequest generates requests for GetObjective
func NewGetObjectiveRequest(server string, eventId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/objectives/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestScoresForEventRequest generates requests for GetLatestScoresForEvent
func NewGetLatestScoresForEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/scores/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSimpleScoreWebSocketRequest generates requests for SimpleScoreWebSocket
func NewSimpleScoreWebSocketRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/scores/simple/ws", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewScoreWebSocketRequest generates requests for ScoreWebSocket
func NewScoreWebSocketRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/scores/ws", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetScoringPresetsForEventRequest generates requests for GetScoringPresetsForEvent
func NewGetScoringPresetsForEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/scoring-presets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScoringPresetRequest calls the generic CreateScoringPreset builder with application/json body
func NewCreateScoringPresetRequest(server string, eventId int, body CreateScoringPresetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScoringPresetRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateScoringPresetRequestWithBody generates requests for CreateScoringPreset with any type of body
func NewCreateScoringPresetRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/scoring-presets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScoringPresetRequest generates requests for DeleteScoringPreset
func NewDeleteScoringPresetRequest(server string, eventId int, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/scoring-presets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventSignupsRequest generates requests for GetEventSignups
func NewGetEventSignupsRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/signups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSignupRequest generates requests for DeleteSignup
func NewDeleteSignupRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/signups/self", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPersonalSignupRequest generates requests for GetPersonalSignup
func NewGetPersonalSignupRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/signups/self", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSignupRequest calls the generic CreateSignup builder with application/json body
func NewCreateSignupRequest(server string, eventId int, body CreateSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSignupRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateSignupRequestWithBody generates requests for CreateSignup with any type of body
func NewCreateSignupRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/signups/self", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEventStatusForUserRequest generates requests for GetEventStatusForUser
func NewGetEventStatusForUserRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubmissionsRequest generates requests for GetSubmissions
func NewGetSubmissionsRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/submissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitBountyRequest calls the generic SubmitBounty builder with application/json body
func NewSubmitBountyRequest(server string, eventId int, body SubmitBountyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitBountyRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewSubmitBountyRequestWithBody generates requests for SubmitBounty with any type of body
func NewSubmitBountyRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/submissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSubmissionRequest generates requests for DeleteSubmission
func NewDeleteSubmissionRequest(server string, eventId int, submissionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submission_id", runtime.ParamLocationPath, submissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/submissions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReviewSubmissionRequest calls the generic ReviewSubmission builder with application/json body
func NewReviewSubmissionRequest(server string, eventId int, submissionId int, body ReviewSubmissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReviewSubmissionRequestWithBody(server, eventId, submissionId, "application/json", bodyReader)
}

// NewReviewSubmissionRequestWithBody generates requests for ReviewSubmission with any type of body
func NewReviewSubmissionRequestWithBody(server string, eventId int, submissionId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "submission_id", runtime.ParamLocationPath, submissionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/submissions/%s/review", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamSuggestionsRequest generates requests for GetTeamSuggestions
func NewGetTeamSuggestionsRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/suggestions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCategoryTeamSuggestionRequest calls the generic CreateCategoryTeamSuggestion builder with application/json body
func NewCreateCategoryTeamSuggestionRequest(server string, eventId int, body CreateCategoryTeamSuggestionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryTeamSuggestionRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateCategoryTeamSuggestionRequestWithBody generates requests for CreateCategoryTeamSuggestion with any type of body
func NewCreateCategoryTeamSuggestionRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/suggestions/categories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCategoryTeamSuggestionRequest generates requests for DeleteCategoryTeamSuggestion
func NewDeleteCategoryTeamSuggestionRequest(server string, eventId int, categoryId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "category_id", runtime.ParamLocationPath, categoryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/suggestions/categories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateObjectiveTeamSuggestionRequest calls the generic CreateObjectiveTeamSuggestion builder with application/json body
func NewCreateObjectiveTeamSuggestionRequest(server string, eventId int, body CreateObjectiveTeamSuggestionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateObjectiveTeamSuggestionRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateObjectiveTeamSuggestionRequestWithBody generates requests for CreateObjectiveTeamSuggestion with any type of body
func NewCreateObjectiveTeamSuggestionRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/suggestions/objectives", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectiveTeamSuggestionRequest generates requests for DeleteObjectiveTeamSuggestion
func NewDeleteObjectiveTeamSuggestionRequest(server string, eventId int, objectiveId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "objective_id", runtime.ParamLocationPath, objectiveId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/suggestions/objectives/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsRequest generates requests for GetTeams
func NewGetTeamsRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequest calls the generic CreateTeam builder with application/json body
func NewCreateTeamRequest(server string, eventId int, body CreateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/teams", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddUsersToTeamsRequest calls the generic AddUsersToTeams builder with application/json body
func NewAddUsersToTeamsRequest(server string, eventId int, body AddUsersToTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUsersToTeamsRequestWithBody(server, eventId, "application/json", bodyReader)
}

// NewAddUsersToTeamsRequestWithBody generates requests for AddUsersToTeams with any type of body
func NewAddUsersToTeamsRequestWithBody(server string, eventId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/teams/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, eventId int, teamId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, eventId int, teamId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "team_id", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/teams/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersForEventRequest generates requests for GetUsersForEvent
func NewGetUsersForEventRequest(server string, eventId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsRequest generates requests for GetJobs
func NewGetJobsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStartJobRequest calls the generic StartJob builder with application/json body
func NewStartJobRequest(server string, body StartJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStartJobRequestWithBody(server, "application/json", bodyReader)
}

// NewStartJobRequestWithBody generates requests for StartJob with any type of body
func NewStartJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginDiscordBotRequest generates requests for LoginDiscordBot
func NewLoginDiscordBotRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/discord/bot-login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOauthCallbackRequest calls the generic OauthCallback builder with application/json body
func NewOauthCallbackRequest(server string, provider OauthCallbackParamsProvider, body OauthCallbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOauthCallbackRequestWithBody(server, provider, "application/json", bodyReader)
}

// NewOauthCallbackRequestWithBody generates requests for OauthCallback with any type of body
func NewOauthCallbackRequestWithBody(server string, provider OauthCallbackParamsProvider, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/%s/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOauthRedirectRequest generates requests for OauthRedirect
func NewOauthRedirectRequest(server string, provider OauthRedirectParamsProvider, params *OauthRedirectParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/%s/redirect", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RedirectUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_url", runtime.ParamLocationQuery, *params.RedirectUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_url", runtime.ParamLocationQuery, *params.LastUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStreamsRequest generates requests for GetStreams
func NewGetStreamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/streams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllUsersRequest generates requests for GetAllUsers
func NewGetAllUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveAuthRequest generates requests for RemoveAuth
func NewRemoveAuthRequest(server string, params *RemoveAuthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/remove-auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "provider", runtime.ParamLocationQuery, params.Provider); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserByIdRequest generates requests for GetUserById
func NewGetUserByIdRequest(server string, userId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangePermissionsRequest calls the generic ChangePermissions builder with application/json body
func NewChangePermissionsRequest(server string, userId int, body ChangePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangePermissionsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewChangePermissionsRequestWithBody generates requests for ChangePermissions with any type of body
func NewChangePermissionsRequestWithBody(server string, userId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUserCharactersWithResponse request
	GetUserCharactersWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserCharactersResponse, error)

	// GetCharacterEventHistoryForUserWithResponse request
	GetCharacterEventHistoryForUserWithResponse(ctx context.Context, userId int, eventId int, reqEditors ...RequestEditorFn) (*GetCharacterEventHistoryForUserResponse, error)

	// GetEventsWithResponse request
	GetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventsResponse, error)

	// CreateEventWithBodyWithResponse request with any body
	CreateEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEventResponse, error)

	CreateEventWithResponse(ctx context.Context, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEventResponse, error)

	// DeleteEventWithResponse request
	DeleteEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*DeleteEventResponse, error)

	// GetEventWithResponse request
	GetEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetEventResponse, error)

	// GetTeamAtlasesForEventWithResponse request
	GetTeamAtlasesForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetTeamAtlasesForEventResponse, error)

	// GetRulesForEventWithResponse request
	GetRulesForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetRulesForEventResponse, error)

	// CreateCategoryWithBodyWithResponse request with any body
	CreateCategoryWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	CreateCategoryWithResponse(ctx context.Context, eventId int, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	// DeleteCategoryWithResponse request
	DeleteCategoryWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error)

	// GetScoringCategoryWithResponse request
	GetScoringCategoryWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*GetScoringCategoryResponse, error)

	// GetCharactersForEventWithResponse request
	GetCharactersForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetCharactersForEventResponse, error)

	// CreateConditionWithBodyWithResponse request with any body
	CreateConditionWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConditionResponse, error)

	CreateConditionWithResponse(ctx context.Context, eventId int, body CreateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConditionResponse, error)

	// GetValidMappingsWithResponse request
	GetValidMappingsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetValidMappingsResponse, error)

	// DeleteConditionWithResponse request
	DeleteConditionWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteConditionResponse, error)

	// DuplicateEventWithBodyWithResponse request with any body
	DuplicateEventWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicateEventResponse, error)

	DuplicateEventWithResponse(ctx context.Context, eventId int, body DuplicateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicateEventResponse, error)

	// GetLadderWithResponse request
	GetLadderWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetLadderResponse, error)

	// CreateObjectiveWithBodyWithResponse request with any body
	CreateObjectiveWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateObjectiveResponse, error)

	CreateObjectiveWithResponse(ctx context.Context, eventId int, body CreateObjectiveJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateObjectiveResponse, error)

	// DeleteObjectiveWithResponse request
	DeleteObjectiveWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteObjectiveResponse, error)

	// GetObjectiveWithResponse request
	GetObjectiveWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*GetObjectiveResponse, error)

	// GetLatestScoresForEventWithResponse request
	GetLatestScoresForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetLatestScoresForEventResponse, error)

	// SimpleScoreWebSocketWithResponse request
	SimpleScoreWebSocketWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*SimpleScoreWebSocketResponse, error)

	// ScoreWebSocketWithResponse request
	ScoreWebSocketWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*ScoreWebSocketResponse, error)

	// GetScoringPresetsForEventWithResponse request
	GetScoringPresetsForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetScoringPresetsForEventResponse, error)

	// CreateScoringPresetWithBodyWithResponse request with any body
	CreateScoringPresetWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScoringPresetResponse, error)

	CreateScoringPresetWithResponse(ctx context.Context, eventId int, body CreateScoringPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScoringPresetResponse, error)

	// DeleteScoringPresetWithResponse request
	DeleteScoringPresetWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteScoringPresetResponse, error)

	// GetEventSignupsWithResponse request
	GetEventSignupsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetEventSignupsResponse, error)

	// DeleteSignupWithResponse request
	DeleteSignupWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*DeleteSignupResponse, error)

	// GetPersonalSignupWithResponse request
	GetPersonalSignupWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetPersonalSignupResponse, error)

	// CreateSignupWithBodyWithResponse request with any body
	CreateSignupWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSignupResponse, error)

	CreateSignupWithResponse(ctx context.Context, eventId int, body CreateSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSignupResponse, error)

	// GetEventStatusForUserWithResponse request
	GetEventStatusForUserWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetEventStatusForUserResponse, error)

	// GetSubmissionsWithResponse request
	GetSubmissionsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetSubmissionsResponse, error)

	// SubmitBountyWithBodyWithResponse request with any body
	SubmitBountyWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitBountyResponse, error)

	SubmitBountyWithResponse(ctx context.Context, eventId int, body SubmitBountyJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitBountyResponse, error)

	// DeleteSubmissionWithResponse request
	DeleteSubmissionWithResponse(ctx context.Context, eventId int, submissionId int, reqEditors ...RequestEditorFn) (*DeleteSubmissionResponse, error)

	// ReviewSubmissionWithBodyWithResponse request with any body
	ReviewSubmissionWithBodyWithResponse(ctx context.Context, eventId int, submissionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewSubmissionResponse, error)

	ReviewSubmissionWithResponse(ctx context.Context, eventId int, submissionId int, body ReviewSubmissionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewSubmissionResponse, error)

	// GetTeamSuggestionsWithResponse request
	GetTeamSuggestionsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetTeamSuggestionsResponse, error)

	// CreateCategoryTeamSuggestionWithBodyWithResponse request with any body
	CreateCategoryTeamSuggestionWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryTeamSuggestionResponse, error)

	CreateCategoryTeamSuggestionWithResponse(ctx context.Context, eventId int, body CreateCategoryTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryTeamSuggestionResponse, error)

	// DeleteCategoryTeamSuggestionWithResponse request
	DeleteCategoryTeamSuggestionWithResponse(ctx context.Context, eventId int, categoryId int, reqEditors ...RequestEditorFn) (*DeleteCategoryTeamSuggestionResponse, error)

	// CreateObjectiveTeamSuggestionWithBodyWithResponse request with any body
	CreateObjectiveTeamSuggestionWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateObjectiveTeamSuggestionResponse, error)

	CreateObjectiveTeamSuggestionWithResponse(ctx context.Context, eventId int, body CreateObjectiveTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateObjectiveTeamSuggestionResponse, error)

	// DeleteObjectiveTeamSuggestionWithResponse request
	DeleteObjectiveTeamSuggestionWithResponse(ctx context.Context, eventId int, objectiveId int, reqEditors ...RequestEditorFn) (*DeleteObjectiveTeamSuggestionResponse, error)

	// GetTeamsWithResponse request
	GetTeamsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error)

	// CreateTeamWithBodyWithResponse request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithResponse(ctx context.Context, eventId int, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// AddUsersToTeamsWithBodyWithResponse request with any body
	AddUsersToTeamsWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUsersToTeamsResponse, error)

	AddUsersToTeamsWithResponse(ctx context.Context, eventId int, body AddUsersToTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUsersToTeamsResponse, error)

	// DeleteTeamWithResponse request
	DeleteTeamWithResponse(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeamWithResponse request
	GetTeamWithResponse(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// GetUsersForEventWithResponse request
	GetUsersForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetUsersForEventResponse, error)

	// GetJobsWithResponse request
	GetJobsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJobsResponse, error)

	// StartJobWithBodyWithResponse request with any body
	StartJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartJobResponse, error)

	StartJobWithResponse(ctx context.Context, body StartJobJSONRequestBody, reqEditors ...RequestEditorFn) (*StartJobResponse, error)

	// LoginDiscordBotWithResponse request
	LoginDiscordBotWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginDiscordBotResponse, error)

	// OauthCallbackWithBodyWithResponse request with any body
	OauthCallbackWithBodyWithResponse(ctx context.Context, provider OauthCallbackParamsProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OauthCallbackResponse, error)

	OauthCallbackWithResponse(ctx context.Context, provider OauthCallbackParamsProvider, body OauthCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OauthCallbackResponse, error)

	// OauthRedirectWithResponse request
	OauthRedirectWithResponse(ctx context.Context, provider OauthRedirectParamsProvider, params *OauthRedirectParams, reqEditors ...RequestEditorFn) (*OauthRedirectResponse, error)

	// GetStreamsWithResponse request
	GetStreamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStreamsResponse, error)

	// GetAllUsersWithResponse request
	GetAllUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error)

	// RemoveAuthWithResponse request
	RemoveAuthWithResponse(ctx context.Context, params *RemoveAuthParams, reqEditors ...RequestEditorFn) (*RemoveAuthResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// GetUserByIdWithResponse request
	GetUserByIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserByIdResponse, error)

	// ChangePermissionsWithBodyWithResponse request with any body
	ChangePermissionsWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePermissionsResponse, error)

	ChangePermissionsWithResponse(ctx context.Context, userId int, body ChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePermissionsResponse, error)
}

type GetUserCharactersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Character
}

// Status returns HTTPResponse.Status
func (r GetUserCharactersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserCharactersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharacterEventHistoryForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Character
}

// Status returns HTTPResponse.Status
func (r GetCharacterEventHistoryForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharacterEventHistoryForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Event
}

// Status returns HTTPResponse.Status
func (r GetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Event
}

// Status returns HTTPResponse.Status
func (r CreateEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r GetEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamAtlasesForEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Atlas
}

// Status returns HTTPResponse.Status
func (r GetTeamAtlasesForEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamAtlasesForEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesForEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r GetRulesForEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesForEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Category
}

// Status returns HTTPResponse.Status
func (r CreateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScoringCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Category
}

// Status returns HTTPResponse.Status
func (r GetScoringCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScoringCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCharactersForEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Character
}

// Status returns HTTPResponse.Status
func (r GetCharactersForEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCharactersForEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Condition
}

// Status returns HTTPResponse.Status
func (r CreateConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConditionMappings
}

// Status returns HTTPResponse.Status
func (r GetValidMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DuplicateEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Event
}

// Status returns HTTPResponse.Status
func (r DuplicateEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DuplicateEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLadderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LadderEntry
}

// Status returns HTTPResponse.Status
func (r GetLadderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLadderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateObjectiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Objective
}

// Status returns HTTPResponse.Status
func (r CreateObjectiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateObjectiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Objective
}

// Status returns HTTPResponse.Status
func (r GetObjectiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestScoresForEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScoreMap
}

// Status returns HTTPResponse.Status
func (r GetLatestScoresForEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestScoresForEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SimpleScoreWebSocketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SimpleScoreWebSocketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SimpleScoreWebSocketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ScoreWebSocketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ScoreWebSocketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ScoreWebSocketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetScoringPresetsForEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScoringPreset
}

// Status returns HTTPResponse.Status
func (r GetScoringPresetsForEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetScoringPresetsForEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScoringPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScoringPreset
}

// Status returns HTTPResponse.Status
func (r CreateScoringPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScoringPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScoringPresetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScoringPresetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScoringPresetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventSignupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Signup
}

// Status returns HTTPResponse.Status
func (r GetEventSignupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventSignupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPersonalSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Signup
}

// Status returns HTTPResponse.Status
func (r GetPersonalSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonalSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Signup
}

// Status returns HTTPResponse.Status
func (r CreateSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventStatusForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventStatus
}

// Status returns HTTPResponse.Status
func (r GetEventStatusForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventStatusForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubmissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Submission
}

// Status returns HTTPResponse.Status
func (r GetSubmissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubmissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitBountyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Submission
}

// Status returns HTTPResponse.Status
func (r SubmitBountyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitBountyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSubmissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSubmissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSubmissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReviewSubmissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Submission
}

// Status returns HTTPResponse.Status
func (r ReviewSubmissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReviewSubmissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamSuggestionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Suggestions
}

// Status returns HTTPResponse.Status
func (r GetTeamSuggestionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamSuggestionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryTeamSuggestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateCategoryTeamSuggestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryTeamSuggestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryTeamSuggestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryTeamSuggestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryTeamSuggestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateObjectiveTeamSuggestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateObjectiveTeamSuggestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateObjectiveTeamSuggestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectiveTeamSuggestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectiveTeamSuggestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectiveTeamSuggestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Team
}

// Status returns HTTPResponse.Status
func (r GetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Team
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUsersToTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddUsersToTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUsersToTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersForEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string][]MinimalUser
}

// Status returns HTTPResponse.Status
func (r GetUsersForEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersForEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RecurringJob
}

// Status returns HTTPResponse.Status
func (r GetJobsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StartJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RecurringJob
}

// Status returns HTTPResponse.Status
func (r StartJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StartJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginDiscordBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r LoginDiscordBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginDiscordBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OauthCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthRedirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OauthRedirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthRedirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStreamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TwitchStream
}

// Status returns HTTPResponse.Status
func (r GetStreamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStreamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetAllUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r RemoveAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r ChangePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUserCharactersWithResponse request returning *GetUserCharactersResponse
func (c *ClientWithResponses) GetUserCharactersWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserCharactersResponse, error) {
	rsp, err := c.GetUserCharacters(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserCharactersResponse(rsp)
}

// GetCharacterEventHistoryForUserWithResponse request returning *GetCharacterEventHistoryForUserResponse
func (c *ClientWithResponses) GetCharacterEventHistoryForUserWithResponse(ctx context.Context, userId int, eventId int, reqEditors ...RequestEditorFn) (*GetCharacterEventHistoryForUserResponse, error) {
	rsp, err := c.GetCharacterEventHistoryForUser(ctx, userId, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharacterEventHistoryForUserResponse(rsp)
}

// GetEventsWithResponse request returning *GetEventsResponse
func (c *ClientWithResponses) GetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEventsResponse, error) {
	rsp, err := c.GetEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventsResponse(rsp)
}

// CreateEventWithBodyWithResponse request with arbitrary body returning *CreateEventResponse
func (c *ClientWithResponses) CreateEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEventResponse, error) {
	rsp, err := c.CreateEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEventResponse(rsp)
}

func (c *ClientWithResponses) CreateEventWithResponse(ctx context.Context, body CreateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEventResponse, error) {
	rsp, err := c.CreateEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEventResponse(rsp)
}

// DeleteEventWithResponse request returning *DeleteEventResponse
func (c *ClientWithResponses) DeleteEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*DeleteEventResponse, error) {
	rsp, err := c.DeleteEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEventResponse(rsp)
}

// GetEventWithResponse request returning *GetEventResponse
func (c *ClientWithResponses) GetEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetEventResponse, error) {
	rsp, err := c.GetEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventResponse(rsp)
}

// GetTeamAtlasesForEventWithResponse request returning *GetTeamAtlasesForEventResponse
func (c *ClientWithResponses) GetTeamAtlasesForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetTeamAtlasesForEventResponse, error) {
	rsp, err := c.GetTeamAtlasesForEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamAtlasesForEventResponse(rsp)
}

// GetRulesForEventWithResponse request returning *GetRulesForEventResponse
func (c *ClientWithResponses) GetRulesForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetRulesForEventResponse, error) {
	rsp, err := c.GetRulesForEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesForEventResponse(rsp)
}

// CreateCategoryWithBodyWithResponse request with arbitrary body returning *CreateCategoryResponse
func (c *ClientWithResponses) CreateCategoryWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategoryWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryWithResponse(ctx context.Context, eventId int, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategory(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

// DeleteCategoryWithResponse request returning *DeleteCategoryResponse
func (c *ClientWithResponses) DeleteCategoryWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error) {
	rsp, err := c.DeleteCategory(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryResponse(rsp)
}

// GetScoringCategoryWithResponse request returning *GetScoringCategoryResponse
func (c *ClientWithResponses) GetScoringCategoryWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*GetScoringCategoryResponse, error) {
	rsp, err := c.GetScoringCategory(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScoringCategoryResponse(rsp)
}

// GetCharactersForEventWithResponse request returning *GetCharactersForEventResponse
func (c *ClientWithResponses) GetCharactersForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetCharactersForEventResponse, error) {
	rsp, err := c.GetCharactersForEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCharactersForEventResponse(rsp)
}

// CreateConditionWithBodyWithResponse request with arbitrary body returning *CreateConditionResponse
func (c *ClientWithResponses) CreateConditionWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConditionResponse, error) {
	rsp, err := c.CreateConditionWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConditionResponse(rsp)
}

func (c *ClientWithResponses) CreateConditionWithResponse(ctx context.Context, eventId int, body CreateConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConditionResponse, error) {
	rsp, err := c.CreateCondition(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConditionResponse(rsp)
}

// GetValidMappingsWithResponse request returning *GetValidMappingsResponse
func (c *ClientWithResponses) GetValidMappingsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetValidMappingsResponse, error) {
	rsp, err := c.GetValidMappings(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidMappingsResponse(rsp)
}

// DeleteConditionWithResponse request returning *DeleteConditionResponse
func (c *ClientWithResponses) DeleteConditionWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteConditionResponse, error) {
	rsp, err := c.DeleteCondition(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConditionResponse(rsp)
}

// DuplicateEventWithBodyWithResponse request with arbitrary body returning *DuplicateEventResponse
func (c *ClientWithResponses) DuplicateEventWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DuplicateEventResponse, error) {
	rsp, err := c.DuplicateEventWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateEventResponse(rsp)
}

func (c *ClientWithResponses) DuplicateEventWithResponse(ctx context.Context, eventId int, body DuplicateEventJSONRequestBody, reqEditors ...RequestEditorFn) (*DuplicateEventResponse, error) {
	rsp, err := c.DuplicateEvent(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDuplicateEventResponse(rsp)
}

// GetLadderWithResponse request returning *GetLadderResponse
func (c *ClientWithResponses) GetLadderWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetLadderResponse, error) {
	rsp, err := c.GetLadder(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLadderResponse(rsp)
}

// CreateObjectiveWithBodyWithResponse request with arbitrary body returning *CreateObjectiveResponse
func (c *ClientWithResponses) CreateObjectiveWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateObjectiveResponse, error) {
	rsp, err := c.CreateObjectiveWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateObjectiveResponse(rsp)
}

func (c *ClientWithResponses) CreateObjectiveWithResponse(ctx context.Context, eventId int, body CreateObjectiveJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateObjectiveResponse, error) {
	rsp, err := c.CreateObjective(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateObjectiveResponse(rsp)
}

// DeleteObjectiveWithResponse request returning *DeleteObjectiveResponse
func (c *ClientWithResponses) DeleteObjectiveWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteObjectiveResponse, error) {
	rsp, err := c.DeleteObjective(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectiveResponse(rsp)
}

// GetObjectiveWithResponse request returning *GetObjectiveResponse
func (c *ClientWithResponses) GetObjectiveWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*GetObjectiveResponse, error) {
	rsp, err := c.GetObjective(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectiveResponse(rsp)
}

// GetLatestScoresForEventWithResponse request returning *GetLatestScoresForEventResponse
func (c *ClientWithResponses) GetLatestScoresForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetLatestScoresForEventResponse, error) {
	rsp, err := c.GetLatestScoresForEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestScoresForEventResponse(rsp)
}

// SimpleScoreWebSocketWithResponse request returning *SimpleScoreWebSocketResponse
func (c *ClientWithResponses) SimpleScoreWebSocketWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*SimpleScoreWebSocketResponse, error) {
	rsp, err := c.SimpleScoreWebSocket(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSimpleScoreWebSocketResponse(rsp)
}

// ScoreWebSocketWithResponse request returning *ScoreWebSocketResponse
func (c *ClientWithResponses) ScoreWebSocketWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*ScoreWebSocketResponse, error) {
	rsp, err := c.ScoreWebSocket(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseScoreWebSocketResponse(rsp)
}

// GetScoringPresetsForEventWithResponse request returning *GetScoringPresetsForEventResponse
func (c *ClientWithResponses) GetScoringPresetsForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetScoringPresetsForEventResponse, error) {
	rsp, err := c.GetScoringPresetsForEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetScoringPresetsForEventResponse(rsp)
}

// CreateScoringPresetWithBodyWithResponse request with arbitrary body returning *CreateScoringPresetResponse
func (c *ClientWithResponses) CreateScoringPresetWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScoringPresetResponse, error) {
	rsp, err := c.CreateScoringPresetWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScoringPresetResponse(rsp)
}

func (c *ClientWithResponses) CreateScoringPresetWithResponse(ctx context.Context, eventId int, body CreateScoringPresetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScoringPresetResponse, error) {
	rsp, err := c.CreateScoringPreset(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScoringPresetResponse(rsp)
}

// DeleteScoringPresetWithResponse request returning *DeleteScoringPresetResponse
func (c *ClientWithResponses) DeleteScoringPresetWithResponse(ctx context.Context, eventId int, id int, reqEditors ...RequestEditorFn) (*DeleteScoringPresetResponse, error) {
	rsp, err := c.DeleteScoringPreset(ctx, eventId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScoringPresetResponse(rsp)
}

// GetEventSignupsWithResponse request returning *GetEventSignupsResponse
func (c *ClientWithResponses) GetEventSignupsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetEventSignupsResponse, error) {
	rsp, err := c.GetEventSignups(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventSignupsResponse(rsp)
}

// DeleteSignupWithResponse request returning *DeleteSignupResponse
func (c *ClientWithResponses) DeleteSignupWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*DeleteSignupResponse, error) {
	rsp, err := c.DeleteSignup(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSignupResponse(rsp)
}

// GetPersonalSignupWithResponse request returning *GetPersonalSignupResponse
func (c *ClientWithResponses) GetPersonalSignupWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetPersonalSignupResponse, error) {
	rsp, err := c.GetPersonalSignup(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPersonalSignupResponse(rsp)
}

// CreateSignupWithBodyWithResponse request with arbitrary body returning *CreateSignupResponse
func (c *ClientWithResponses) CreateSignupWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSignupResponse, error) {
	rsp, err := c.CreateSignupWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSignupResponse(rsp)
}

func (c *ClientWithResponses) CreateSignupWithResponse(ctx context.Context, eventId int, body CreateSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSignupResponse, error) {
	rsp, err := c.CreateSignup(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSignupResponse(rsp)
}

// GetEventStatusForUserWithResponse request returning *GetEventStatusForUserResponse
func (c *ClientWithResponses) GetEventStatusForUserWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetEventStatusForUserResponse, error) {
	rsp, err := c.GetEventStatusForUser(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventStatusForUserResponse(rsp)
}

// GetSubmissionsWithResponse request returning *GetSubmissionsResponse
func (c *ClientWithResponses) GetSubmissionsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetSubmissionsResponse, error) {
	rsp, err := c.GetSubmissions(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubmissionsResponse(rsp)
}

// SubmitBountyWithBodyWithResponse request with arbitrary body returning *SubmitBountyResponse
func (c *ClientWithResponses) SubmitBountyWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitBountyResponse, error) {
	rsp, err := c.SubmitBountyWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitBountyResponse(rsp)
}

func (c *ClientWithResponses) SubmitBountyWithResponse(ctx context.Context, eventId int, body SubmitBountyJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitBountyResponse, error) {
	rsp, err := c.SubmitBounty(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitBountyResponse(rsp)
}

// DeleteSubmissionWithResponse request returning *DeleteSubmissionResponse
func (c *ClientWithResponses) DeleteSubmissionWithResponse(ctx context.Context, eventId int, submissionId int, reqEditors ...RequestEditorFn) (*DeleteSubmissionResponse, error) {
	rsp, err := c.DeleteSubmission(ctx, eventId, submissionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSubmissionResponse(rsp)
}

// ReviewSubmissionWithBodyWithResponse request with arbitrary body returning *ReviewSubmissionResponse
func (c *ClientWithResponses) ReviewSubmissionWithBodyWithResponse(ctx context.Context, eventId int, submissionId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReviewSubmissionResponse, error) {
	rsp, err := c.ReviewSubmissionWithBody(ctx, eventId, submissionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewSubmissionResponse(rsp)
}

func (c *ClientWithResponses) ReviewSubmissionWithResponse(ctx context.Context, eventId int, submissionId int, body ReviewSubmissionJSONRequestBody, reqEditors ...RequestEditorFn) (*ReviewSubmissionResponse, error) {
	rsp, err := c.ReviewSubmission(ctx, eventId, submissionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReviewSubmissionResponse(rsp)
}

// GetTeamSuggestionsWithResponse request returning *GetTeamSuggestionsResponse
func (c *ClientWithResponses) GetTeamSuggestionsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetTeamSuggestionsResponse, error) {
	rsp, err := c.GetTeamSuggestions(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamSuggestionsResponse(rsp)
}

// CreateCategoryTeamSuggestionWithBodyWithResponse request with arbitrary body returning *CreateCategoryTeamSuggestionResponse
func (c *ClientWithResponses) CreateCategoryTeamSuggestionWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryTeamSuggestionResponse, error) {
	rsp, err := c.CreateCategoryTeamSuggestionWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryTeamSuggestionResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryTeamSuggestionWithResponse(ctx context.Context, eventId int, body CreateCategoryTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryTeamSuggestionResponse, error) {
	rsp, err := c.CreateCategoryTeamSuggestion(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryTeamSuggestionResponse(rsp)
}

// DeleteCategoryTeamSuggestionWithResponse request returning *DeleteCategoryTeamSuggestionResponse
func (c *ClientWithResponses) DeleteCategoryTeamSuggestionWithResponse(ctx context.Context, eventId int, categoryId int, reqEditors ...RequestEditorFn) (*DeleteCategoryTeamSuggestionResponse, error) {
	rsp, err := c.DeleteCategoryTeamSuggestion(ctx, eventId, categoryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryTeamSuggestionResponse(rsp)
}

// CreateObjectiveTeamSuggestionWithBodyWithResponse request with arbitrary body returning *CreateObjectiveTeamSuggestionResponse
func (c *ClientWithResponses) CreateObjectiveTeamSuggestionWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateObjectiveTeamSuggestionResponse, error) {
	rsp, err := c.CreateObjectiveTeamSuggestionWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateObjectiveTeamSuggestionResponse(rsp)
}

func (c *ClientWithResponses) CreateObjectiveTeamSuggestionWithResponse(ctx context.Context, eventId int, body CreateObjectiveTeamSuggestionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateObjectiveTeamSuggestionResponse, error) {
	rsp, err := c.CreateObjectiveTeamSuggestion(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateObjectiveTeamSuggestionResponse(rsp)
}

// DeleteObjectiveTeamSuggestionWithResponse request returning *DeleteObjectiveTeamSuggestionResponse
func (c *ClientWithResponses) DeleteObjectiveTeamSuggestionWithResponse(ctx context.Context, eventId int, objectiveId int, reqEditors ...RequestEditorFn) (*DeleteObjectiveTeamSuggestionResponse, error) {
	rsp, err := c.DeleteObjectiveTeamSuggestion(ctx, eventId, objectiveId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectiveTeamSuggestionResponse(rsp)
}

// GetTeamsWithResponse request returning *GetTeamsResponse
func (c *ClientWithResponses) GetTeamsWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error) {
	rsp, err := c.GetTeams(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithResponse(ctx context.Context, eventId int, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeam(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// AddUsersToTeamsWithBodyWithResponse request with arbitrary body returning *AddUsersToTeamsResponse
func (c *ClientWithResponses) AddUsersToTeamsWithBodyWithResponse(ctx context.Context, eventId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUsersToTeamsResponse, error) {
	rsp, err := c.AddUsersToTeamsWithBody(ctx, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUsersToTeamsResponse(rsp)
}

func (c *ClientWithResponses) AddUsersToTeamsWithResponse(ctx context.Context, eventId int, body AddUsersToTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddUsersToTeamsResponse, error) {
	rsp, err := c.AddUsersToTeams(ctx, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUsersToTeamsResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, eventId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, eventId int, teamId int, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, eventId, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// GetUsersForEventWithResponse request returning *GetUsersForEventResponse
func (c *ClientWithResponses) GetUsersForEventWithResponse(ctx context.Context, eventId int, reqEditors ...RequestEditorFn) (*GetUsersForEventResponse, error) {
	rsp, err := c.GetUsersForEvent(ctx, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersForEventResponse(rsp)
}

// GetJobsWithResponse request returning *GetJobsResponse
func (c *ClientWithResponses) GetJobsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJobsResponse, error) {
	rsp, err := c.GetJobs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsResponse(rsp)
}

// StartJobWithBodyWithResponse request with arbitrary body returning *StartJobResponse
func (c *ClientWithResponses) StartJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StartJobResponse, error) {
	rsp, err := c.StartJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartJobResponse(rsp)
}

func (c *ClientWithResponses) StartJobWithResponse(ctx context.Context, body StartJobJSONRequestBody, reqEditors ...RequestEditorFn) (*StartJobResponse, error) {
	rsp, err := c.StartJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStartJobResponse(rsp)
}

// LoginDiscordBotWithResponse request returning *LoginDiscordBotResponse
func (c *ClientWithResponses) LoginDiscordBotWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LoginDiscordBotResponse, error) {
	rsp, err := c.LoginDiscordBot(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginDiscordBotResponse(rsp)
}

// OauthCallbackWithBodyWithResponse request with arbitrary body returning *OauthCallbackResponse
func (c *ClientWithResponses) OauthCallbackWithBodyWithResponse(ctx context.Context, provider OauthCallbackParamsProvider, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OauthCallbackResponse, error) {
	rsp, err := c.OauthCallbackWithBody(ctx, provider, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthCallbackResponse(rsp)
}

func (c *ClientWithResponses) OauthCallbackWithResponse(ctx context.Context, provider OauthCallbackParamsProvider, body OauthCallbackJSONRequestBody, reqEditors ...RequestEditorFn) (*OauthCallbackResponse, error) {
	rsp, err := c.OauthCallback(ctx, provider, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthCallbackResponse(rsp)
}

// OauthRedirectWithResponse request returning *OauthRedirectResponse
func (c *ClientWithResponses) OauthRedirectWithResponse(ctx context.Context, provider OauthRedirectParamsProvider, params *OauthRedirectParams, reqEditors ...RequestEditorFn) (*OauthRedirectResponse, error) {
	rsp, err := c.OauthRedirect(ctx, provider, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthRedirectResponse(rsp)
}

// GetStreamsWithResponse request returning *GetStreamsResponse
func (c *ClientWithResponses) GetStreamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStreamsResponse, error) {
	rsp, err := c.GetStreams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStreamsResponse(rsp)
}

// GetAllUsersWithResponse request returning *GetAllUsersResponse
func (c *ClientWithResponses) GetAllUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error) {
	rsp, err := c.GetAllUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllUsersResponse(rsp)
}

// RemoveAuthWithResponse request returning *RemoveAuthResponse
func (c *ClientWithResponses) RemoveAuthWithResponse(ctx context.Context, params *RemoveAuthParams, reqEditors ...RequestEditorFn) (*RemoveAuthResponse, error) {
	rsp, err := c.RemoveAuth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveAuthResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// GetUserByIdWithResponse request returning *GetUserByIdResponse
func (c *ClientWithResponses) GetUserByIdWithResponse(ctx context.Context, userId int, reqEditors ...RequestEditorFn) (*GetUserByIdResponse, error) {
	rsp, err := c.GetUserById(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByIdResponse(rsp)
}

// ChangePermissionsWithBodyWithResponse request with arbitrary body returning *ChangePermissionsResponse
func (c *ClientWithResponses) ChangePermissionsWithBodyWithResponse(ctx context.Context, userId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangePermissionsResponse, error) {
	rsp, err := c.ChangePermissionsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePermissionsResponse(rsp)
}

func (c *ClientWithResponses) ChangePermissionsWithResponse(ctx context.Context, userId int, body ChangePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangePermissionsResponse, error) {
	rsp, err := c.ChangePermissions(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangePermissionsResponse(rsp)
}

// ParseGetUserCharactersResponse parses an HTTP response from a GetUserCharactersWithResponse call
func ParseGetUserCharactersResponse(rsp *http.Response) (*GetUserCharactersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserCharactersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Character
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharacterEventHistoryForUserResponse parses an HTTP response from a GetCharacterEventHistoryForUserWithResponse call
func ParseGetCharacterEventHistoryForUserResponse(rsp *http.Response) (*GetCharacterEventHistoryForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharacterEventHistoryForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Character
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEventsResponse parses an HTTP response from a GetEventsWithResponse call
func ParseGetEventsResponse(rsp *http.Response) (*GetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEventResponse parses an HTTP response from a CreateEventWithResponse call
func ParseCreateEventResponse(rsp *http.Response) (*CreateEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEventResponse parses an HTTP response from a DeleteEventWithResponse call
func ParseDeleteEventResponse(rsp *http.Response) (*DeleteEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventResponse parses an HTTP response from a GetEventWithResponse call
func ParseGetEventResponse(rsp *http.Response) (*GetEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamAtlasesForEventResponse parses an HTTP response from a GetTeamAtlasesForEventWithResponse call
func ParseGetTeamAtlasesForEventResponse(rsp *http.Response) (*GetTeamAtlasesForEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamAtlasesForEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Atlas
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRulesForEventResponse parses an HTTP response from a GetRulesForEventWithResponse call
func ParseGetRulesForEventResponse(rsp *http.Response) (*GetRulesForEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesForEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCategoryResponse parses an HTTP response from a CreateCategoryWithResponse call
func ParseCreateCategoryResponse(rsp *http.Response) (*CreateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCategoryResponse parses an HTTP response from a DeleteCategoryWithResponse call
func ParseDeleteCategoryResponse(rsp *http.Response) (*DeleteCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScoringCategoryResponse parses an HTTP response from a GetScoringCategoryWithResponse call
func ParseGetScoringCategoryResponse(rsp *http.Response) (*GetScoringCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScoringCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Category
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCharactersForEventResponse parses an HTTP response from a GetCharactersForEventWithResponse call
func ParseGetCharactersForEventResponse(rsp *http.Response) (*GetCharactersForEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCharactersForEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Character
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateConditionResponse parses an HTTP response from a CreateConditionWithResponse call
func ParseCreateConditionResponse(rsp *http.Response) (*CreateConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Condition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetValidMappingsResponse parses an HTTP response from a GetValidMappingsWithResponse call
func ParseGetValidMappingsResponse(rsp *http.Response) (*GetValidMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConditionMappings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConditionResponse parses an HTTP response from a DeleteConditionWithResponse call
func ParseDeleteConditionResponse(rsp *http.Response) (*DeleteConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDuplicateEventResponse parses an HTTP response from a DuplicateEventWithResponse call
func ParseDuplicateEventResponse(rsp *http.Response) (*DuplicateEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DuplicateEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetLadderResponse parses an HTTP response from a GetLadderWithResponse call
func ParseGetLadderResponse(rsp *http.Response) (*GetLadderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLadderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LadderEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateObjectiveResponse parses an HTTP response from a CreateObjectiveWithResponse call
func ParseCreateObjectiveResponse(rsp *http.Response) (*CreateObjectiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateObjectiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Objective
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteObjectiveResponse parses an HTTP response from a DeleteObjectiveWithResponse call
func ParseDeleteObjectiveResponse(rsp *http.Response) (*DeleteObjectiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectiveResponse parses an HTTP response from a GetObjectiveWithResponse call
func ParseGetObjectiveResponse(rsp *http.Response) (*GetObjectiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Objective
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLatestScoresForEventResponse parses an HTTP response from a GetLatestScoresForEventWithResponse call
func ParseGetLatestScoresForEventResponse(rsp *http.Response) (*GetLatestScoresForEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestScoresForEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScoreMap
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSimpleScoreWebSocketResponse parses an HTTP response from a SimpleScoreWebSocketWithResponse call
func ParseSimpleScoreWebSocketResponse(rsp *http.Response) (*SimpleScoreWebSocketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SimpleScoreWebSocketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseScoreWebSocketResponse parses an HTTP response from a ScoreWebSocketWithResponse call
func ParseScoreWebSocketResponse(rsp *http.Response) (*ScoreWebSocketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ScoreWebSocketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetScoringPresetsForEventResponse parses an HTTP response from a GetScoringPresetsForEventWithResponse call
func ParseGetScoringPresetsForEventResponse(rsp *http.Response) (*GetScoringPresetsForEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetScoringPresetsForEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScoringPreset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateScoringPresetResponse parses an HTTP response from a CreateScoringPresetWithResponse call
func ParseCreateScoringPresetResponse(rsp *http.Response) (*CreateScoringPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScoringPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScoringPreset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteScoringPresetResponse parses an HTTP response from a DeleteScoringPresetWithResponse call
func ParseDeleteScoringPresetResponse(rsp *http.Response) (*DeleteScoringPresetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScoringPresetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventSignupsResponse parses an HTTP response from a GetEventSignupsWithResponse call
func ParseGetEventSignupsResponse(rsp *http.Response) (*GetEventSignupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventSignupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Signup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSignupResponse parses an HTTP response from a DeleteSignupWithResponse call
func ParseDeleteSignupResponse(rsp *http.Response) (*DeleteSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPersonalSignupResponse parses an HTTP response from a GetPersonalSignupWithResponse call
func ParseGetPersonalSignupResponse(rsp *http.Response) (*GetPersonalSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPersonalSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Signup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSignupResponse parses an HTTP response from a CreateSignupWithResponse call
func ParseCreateSignupResponse(rsp *http.Response) (*CreateSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Signup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetEventStatusForUserResponse parses an HTTP response from a GetEventStatusForUserWithResponse call
func ParseGetEventStatusForUserResponse(rsp *http.Response) (*GetEventStatusForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventStatusForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSubmissionsResponse parses an HTTP response from a GetSubmissionsWithResponse call
func ParseGetSubmissionsResponse(rsp *http.Response) (*GetSubmissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubmissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Submission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitBountyResponse parses an HTTP response from a SubmitBountyWithResponse call
func ParseSubmitBountyResponse(rsp *http.Response) (*SubmitBountyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitBountyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Submission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSubmissionResponse parses an HTTP response from a DeleteSubmissionWithResponse call
func ParseDeleteSubmissionResponse(rsp *http.Response) (*DeleteSubmissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSubmissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReviewSubmissionResponse parses an HTTP response from a ReviewSubmissionWithResponse call
func ParseReviewSubmissionResponse(rsp *http.Response) (*ReviewSubmissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReviewSubmissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Submission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTeamSuggestionsResponse parses an HTTP response from a GetTeamSuggestionsWithResponse call
func ParseGetTeamSuggestionsResponse(rsp *http.Response) (*GetTeamSuggestionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamSuggestionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Suggestions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCategoryTeamSuggestionResponse parses an HTTP response from a CreateCategoryTeamSuggestionWithResponse call
func ParseCreateCategoryTeamSuggestionResponse(rsp *http.Response) (*CreateCategoryTeamSuggestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryTeamSuggestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCategoryTeamSuggestionResponse parses an HTTP response from a DeleteCategoryTeamSuggestionWithResponse call
func ParseDeleteCategoryTeamSuggestionResponse(rsp *http.Response) (*DeleteCategoryTeamSuggestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryTeamSuggestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateObjectiveTeamSuggestionResponse parses an HTTP response from a CreateObjectiveTeamSuggestionWithResponse call
func ParseCreateObjectiveTeamSuggestionResponse(rsp *http.Response) (*CreateObjectiveTeamSuggestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateObjectiveTeamSuggestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectiveTeamSuggestionResponse parses an HTTP response from a DeleteObjectiveTeamSuggestionWithResponse call
func ParseDeleteObjectiveTeamSuggestionResponse(rsp *http.Response) (*DeleteObjectiveTeamSuggestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectiveTeamSuggestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamsResponse parses an HTTP response from a GetTeamsWithResponse call
func ParseGetTeamsResponse(rsp *http.Response) (*GetTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAddUsersToTeamsResponse parses an HTTP response from a AddUsersToTeamsWithResponse call
func ParseAddUsersToTeamsResponse(rsp *http.Response) (*AddUsersToTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUsersToTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersForEventResponse parses an HTTP response from a GetUsersForEventWithResponse call
func ParseGetUsersForEventResponse(rsp *http.Response) (*GetUsersForEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersForEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string][]MinimalUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetJobsResponse parses an HTTP response from a GetJobsWithResponse call
func ParseGetJobsResponse(rsp *http.Response) (*GetJobsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RecurringJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseStartJobResponse parses an HTTP response from a StartJobWithResponse call
func ParseStartJobResponse(rsp *http.Response) (*StartJobResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StartJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RecurringJob
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseLoginDiscordBotResponse parses an HTTP response from a LoginDiscordBotWithResponse call
func ParseLoginDiscordBotResponse(rsp *http.Response) (*LoginDiscordBotResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginDiscordBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOauthCallbackResponse parses an HTTP response from a OauthCallbackWithResponse call
func ParseOauthCallbackResponse(rsp *http.Response) (*OauthCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOauthRedirectResponse parses an HTTP response from a OauthRedirectWithResponse call
func ParseOauthRedirectResponse(rsp *http.Response) (*OauthRedirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthRedirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStreamsResponse parses an HTTP response from a GetStreamsWithResponse call
func ParseGetStreamsResponse(rsp *http.Response) (*GetStreamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStreamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TwitchStream
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllUsersResponse parses an HTTP response from a GetAllUsersWithResponse call
func ParseGetAllUsersResponse(rsp *http.Response) (*GetAllUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveAuthResponse parses an HTTP response from a RemoveAuthWithResponse call
func ParseRemoveAuthResponse(rsp *http.Response) (*RemoveAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserByIdResponse parses an HTTP response from a GetUserByIdWithResponse call
func ParseGetUserByIdResponse(rsp *http.Response) (*GetUserByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseChangePermissionsResponse parses an HTTP response from a ChangePermissionsWithResponse call
func ParseChangePermissionsResponse(rsp *http.Response) (*ChangePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
